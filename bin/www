#!/usr/bin/env node
// 导入db函数
const db = require("./../db/db");
/**
 * Module dependencies.
 */
db(() => {
  var app = require("../app");
  var debug = require("debug")("account-book:server");
  var http = require("http");
  var https = require("https");
  const fs = require("fs");

  var port = normalizePort(process.env.PORT || "443");
  app.set("port", port);

  let server;

  if (process.env.NODE_ENV !== "production") {
    server = http.createServer(app);
    // 监听所有网络接口（包括公网IP）
    server.listen(port, "0.0.0.0", () => {
      console.log(`Server running at http on port ${port}`);
    });
  } else {
    app.use(require("express-sslify").HTTPS({ trustProtoHeader: true }));

    // 证书配置
    const serverOptions = {
      key: fs.readFileSync(
        "/etc/letsencrypt/live/www.summerylaker.site/privkey.pem"
      ),
      cert: fs.readFileSync(
        "/etc/letsencrypt/live/www.summerylaker.site/cert.pem"
      ),
      ca: fs.readFileSync(
        "/etc/letsencrypt/live/www.summerylaker.site/chain.pem"
      ),
    };

    server = https
      .createServer(serverOptions, app)
      .listen(port, "0.0.0.0", () => {
        console.log(`Server running at https on port ${port}`);
      });
  }

  server.on("error", onError);
  server.on("listening", onListening);

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }
});
